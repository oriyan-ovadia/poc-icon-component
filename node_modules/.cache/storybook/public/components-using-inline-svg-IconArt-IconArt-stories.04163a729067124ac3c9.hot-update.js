self["webpackHotUpdatepoc_icon_component"]("components-using-inline-svg-IconArt-IconArt-stories",{

/***/ "./src/components/using-inline-svg/IconArt/IconArt.stories.tsx":
/*!*********************************************************************!*\
  !*** ./src/components/using-inline-svg/IconArt/IconArt.stories.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IconExplorer": () => (/* binding */ IconExplorer),
/* harmony export */   "Primary": () => (/* binding */ Primary),
/* harmony export */   "ThemeColor": () => (/* binding */ ThemeColor),
/* harmony export */   "__namedExportsOrder": () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _IconArt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./IconArt */ "./src/components/using-inline-svg/IconArt/IconArt.tsx");
/* harmony import */ var copy_to_clipboard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! copy-to-clipboard */ "./node_modules/copy-to-clipboard/index.js");
/* harmony import */ var copy_to_clipboard__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(copy_to_clipboard__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _IconArt_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./IconArt.types */ "./src/components/using-inline-svg/IconArt/IconArt.types.ts");
Object(function webpackMissingModule() { var e = new Error("Cannot find module '../../storybook/ButtonToggleGroup/ButtonToggleGroup'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
Object(function webpackMissingModule() { var e = new Error("Cannot find module '../../storybook/Tooltip/Tooltip'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
Object(function webpackMissingModule() { var e = new Error("Cannot find module '../../storybook/HStack/HStack'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _Primary$parameters, _Primary$parameters2, _Primary$parameters2$, _ThemeColor$parameter, _ThemeColor$parameter2, _ThemeColor$parameter3, _IconExplorer$paramet, _IconExplorer$paramet2, _IconExplorer$paramet3;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }









var meta = {
  title: 'Components/IconArt',
  component: _IconArt__WEBPACK_IMPORTED_MODULE_1__.IconArt,
  tags: ['autodocs']
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
var Primary = {
  render: function render(args) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_IconArt__WEBPACK_IMPORTED_MODULE_1__.IconArt, _objectSpread({}, args));
  },
  args: {
    icon: 'dog-face'
  }
};
var ThemeColor = {
  render: function render(args) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(Object(function webpackMissingModule() { var e = new Error("Cannot find module '../../storybook/HStack/HStack'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), {
      gap: "md",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_IconArt__WEBPACK_IMPORTED_MODULE_1__.IconArt, _objectSpread(_objectSpread({}, args), {}, {
        icon: "dog-face",
        theme: "light"
      })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_IconArt__WEBPACK_IMPORTED_MODULE_1__.IconArt, _objectSpread(_objectSpread({}, args), {}, {
        icon: "dog-face",
        theme: "dark"
      })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_IconArt__WEBPACK_IMPORTED_MODULE_1__.IconArt, _objectSpread(_objectSpread({}, args), {}, {
        icon: "cat-face",
        theme: "light"
      })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_IconArt__WEBPACK_IMPORTED_MODULE_1__.IconArt, _objectSpread(_objectSpread({}, args), {}, {
        icon: "cat-face",
        theme: "dark"
      }))]
    });
  },
  // @ts-ignore
  args: {},
  parameters: {
    docs: {
      description: {
        story: "By using the `theme` prop, the icon can adjust itself according to the app's theme. The default is `light`."
      }
    }
  }
};
var AllIcons = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(function (_ref) {
  var icons = _ref.icons,
    theme = _ref.theme;
  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(''),
    _useState2 = _slicedToArray(_useState, 2),
    copiedIconName = _useState2[0],
    setCopiedIconName = _useState2[1];
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
    var timeout;
    if (copiedIconName) {
      timeout = setTimeout(function () {
        setCopiedIconName('');
      }, 1000);
    }
    return function () {
      clearTimeout(timeout);
    };
  }, [copiedIconName]);
  function _onClick(iconName) {
    copy_to_clipboard__WEBPACK_IMPORTED_MODULE_2___default()(iconName);
    if (copiedIconName !== iconName || !copiedIconName) {
      setCopiedIconName(iconName);
    }
  }
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("div", {
    className: "icon-grid",
    children: icons.map(function (iconName) {
      var isCopied = iconName === copiedIconName;
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("div", {
        className: "icon-btn-wrapper",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Object(function webpackMissingModule() { var e = new Error("Cannot find module '../../storybook/Tooltip/Tooltip'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), {
          content: isCopied ? 'Copied to clipboard' : iconName,
          isOpen: copiedIconName && isCopied ? true : undefined,
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("button", {
            className: "btn-icon",
            onClick: function onClick() {
              return _onClick(iconName);
            },
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_IconArt__WEBPACK_IMPORTED_MODULE_1__.IconArt, {
              icon: iconName,
              size: "md",
              theme: theme
            })
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("div", {
          className: "icon-name",
          children: iconName
        })]
      }, iconName);
    })
  });
});
var IconExplorer = {
  render: function render(args) {
    var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('light'),
      _useState4 = _slicedToArray(_useState3, 2),
      theme = _useState4[0],
      setThemeColor = _useState4[1];
    function onToggleThemeColor(value) {
      setThemeColor(value);
    }
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("div", {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("div", {
        style: {
          marginInline: '30px'
        },
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(Object(function webpackMissingModule() { var e = new Error("Cannot find module '../../storybook/ButtonToggleGroup/ButtonToggleGroup'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), {
          defaultValue: "light",
          onChange: onToggleThemeColor,
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Object(function webpackMissingModule() { var e = new Error("Cannot find module '../../storybook/ButtonToggleGroup/ButtonToggleGroup'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), {
            value: "light",
            children: "Light"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Object(function webpackMissingModule() { var e = new Error("Cannot find module '../../storybook/ButtonToggleGroup/ButtonToggleGroup'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), {
            value: "dark",
            children: "Dark"
          })]
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(AllIcons, {
        icons: _IconArt_types__WEBPACK_IMPORTED_MODULE_5__.iconArtArr,
        theme: theme
      })]
    });
  },
  // @ts-ignore
  args: {},
  parameters: {
    docs: {
      description: {
        story: 'Browse icons, copy their names to the clipboard by clicking them, and view them in different theme color.'
      }
    }
  }
};
Primary.parameters = _objectSpread(_objectSpread({}, Primary.parameters), {}, {
  docs: _objectSpread(_objectSpread({}, (_Primary$parameters = Primary.parameters) === null || _Primary$parameters === void 0 ? void 0 : _Primary$parameters.docs), {}, {
    source: _objectSpread({
      originalSource: "{\n  render: args => {\n    return <IconArt {...args}></IconArt>;\n  },\n  args: {\n    icon: 'dog-face'\n  }\n}"
    }, (_Primary$parameters2 = Primary.parameters) === null || _Primary$parameters2 === void 0 ? void 0 : (_Primary$parameters2$ = _Primary$parameters2.docs) === null || _Primary$parameters2$ === void 0 ? void 0 : _Primary$parameters2$.source)
  })
});
ThemeColor.parameters = _objectSpread(_objectSpread({}, ThemeColor.parameters), {}, {
  docs: _objectSpread(_objectSpread({}, (_ThemeColor$parameter = ThemeColor.parameters) === null || _ThemeColor$parameter === void 0 ? void 0 : _ThemeColor$parameter.docs), {}, {
    source: _objectSpread({
      originalSource: "{\n  render: args => {\n    return <HStack gap=\"md\">\n        <IconArt {...args} icon=\"dog-face\" theme=\"light\" />\n        <IconArt {...args} icon=\"dog-face\" theme=\"dark\" />\n        <IconArt {...args} icon=\"cat-face\" theme=\"light\" />\n        <IconArt {...args} icon=\"cat-face\" theme=\"dark\" />\n      </HStack>;\n  },\n  // @ts-ignore\n  args: {},\n  parameters: {\n    docs: {\n      description: {\n        story: \"By using the `theme` prop, the icon can adjust itself according to the app's theme. The default is `light`.\"\n      }\n    }\n  }\n}"
    }, (_ThemeColor$parameter2 = ThemeColor.parameters) === null || _ThemeColor$parameter2 === void 0 ? void 0 : (_ThemeColor$parameter3 = _ThemeColor$parameter2.docs) === null || _ThemeColor$parameter3 === void 0 ? void 0 : _ThemeColor$parameter3.source)
  })
});
IconExplorer.parameters = _objectSpread(_objectSpread({}, IconExplorer.parameters), {}, {
  docs: _objectSpread(_objectSpread({}, (_IconExplorer$paramet = IconExplorer.parameters) === null || _IconExplorer$paramet === void 0 ? void 0 : _IconExplorer$paramet.docs), {}, {
    source: _objectSpread({
      originalSource: "{\n  render: args => {\n    const [theme, setThemeColor] = useState<ThemeType>('light');\n    function onToggleThemeColor(value: string) {\n      setThemeColor((value as ThemeType));\n    }\n    return <div>\n        <div style={{\n        marginInline: '30px'\n      }}>\n          <ButtonToggleGroup defaultValue=\"light\" onChange={onToggleThemeColor}>\n            <ButtonToggleGroup.Button value=\"light\">Light</ButtonToggleGroup.Button>\n            <ButtonToggleGroup.Button value=\"dark\">Dark</ButtonToggleGroup.Button>\n          </ButtonToggleGroup>\n        </div>\n        <AllIcons icons={iconArtArr} theme={theme} />\n      </div>;\n  },\n  // @ts-ignore\n  args: {},\n  parameters: {\n    docs: {\n      description: {\n        story: 'Browse icons, copy their names to the clipboard by clicking them, and view them in different theme color.'\n      }\n    }\n  }\n}"
    }, (_IconExplorer$paramet2 = IconExplorer.parameters) === null || _IconExplorer$paramet2 === void 0 ? void 0 : (_IconExplorer$paramet3 = _IconExplorer$paramet2.docs) === null || _IconExplorer$paramet3 === void 0 ? void 0 : _IconExplorer$paramet3.source)
  })
});
var __namedExportsOrder = ["Primary", "ThemeColor", "IconExplorer"];

/***/ }),

/***/ "./node_modules/classcat/index.js":
/*!****************************************!*\
  !*** ./node_modules/classcat/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ cc)
/* harmony export */ });
function cc(names) {
  if (typeof names === "string" || typeof names === "number") return "" + names

  let out = ""

  if (Array.isArray(names)) {
    for (let i = 0, tmp; i < names.length; i++) {
      if ((tmp = cc(names[i])) !== "") {
        out += (out && " ") + tmp
      }
    }
  } else {
    for (let k in names) {
      if (names[k]) out += (out && " ") + k
    }
  }

  return out
}


/***/ }),

/***/ "./node_modules/copy-to-clipboard/index.js":
/*!*************************************************!*\
  !*** ./node_modules/copy-to-clipboard/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var deselectCurrent = __webpack_require__(/*! toggle-selection */ "./node_modules/toggle-selection/index.js");

var clipboardToIE11Formatting = {
  "text/plain": "Text",
  "text/html": "Url",
  "default": "Text"
}

var defaultMessage = "Copy to clipboard: #{key}, Enter";

function format(message) {
  var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
  return message.replace(/#{\s*key\s*}/g, copyKey);
}

function copy(text, options) {
  var debug,
    message,
    reselectPrevious,
    range,
    selection,
    mark,
    success = false;
  if (!options) {
    options = {};
  }
  debug = options.debug || false;
  try {
    reselectPrevious = deselectCurrent();

    range = document.createRange();
    selection = document.getSelection();

    mark = document.createElement("span");
    mark.textContent = text;
    // avoid screen readers from reading out loud the text
    mark.ariaHidden = "true"
    // reset user styles for span element
    mark.style.all = "unset";
    // prevents scrolling to the end of the page
    mark.style.position = "fixed";
    mark.style.top = 0;
    mark.style.clip = "rect(0, 0, 0, 0)";
    // used to preserve spaces and line breaks
    mark.style.whiteSpace = "pre";
    // do not inherit user-select (it may be `none`)
    mark.style.webkitUserSelect = "text";
    mark.style.MozUserSelect = "text";
    mark.style.msUserSelect = "text";
    mark.style.userSelect = "text";
    mark.addEventListener("copy", function(e) {
      e.stopPropagation();
      if (options.format) {
        e.preventDefault();
        if (typeof e.clipboardData === "undefined") { // IE 11
          debug && console.warn("unable to use e.clipboardData");
          debug && console.warn("trying IE specific stuff");
          window.clipboardData.clearData();
          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"]
          window.clipboardData.setData(format, text);
        } else { // all other browsers
          e.clipboardData.clearData();
          e.clipboardData.setData(options.format, text);
        }
      }
      if (options.onCopy) {
        e.preventDefault();
        options.onCopy(e.clipboardData);
      }
    });

    document.body.appendChild(mark);

    range.selectNodeContents(mark);
    selection.addRange(range);

    var successful = document.execCommand("copy");
    if (!successful) {
      throw new Error("copy command was unsuccessful");
    }
    success = true;
  } catch (err) {
    debug && console.error("unable to copy using execCommand: ", err);
    debug && console.warn("trying IE specific stuff");
    try {
      window.clipboardData.setData(options.format || "text", text);
      options.onCopy && options.onCopy(window.clipboardData);
      success = true;
    } catch (err) {
      debug && console.error("unable to copy using clipboardData: ", err);
      debug && console.error("falling back to prompt");
      message = format("message" in options ? options.message : defaultMessage);
      window.prompt(message, text);
    }
  } finally {
    if (selection) {
      if (typeof selection.removeRange == "function") {
        selection.removeRange(range);
      } else {
        selection.removeAllRanges();
      }
    }

    if (mark) {
      document.body.removeChild(mark);
    }
    reselectPrevious();
  }

  return success;
}

module.exports = copy;


/***/ }),

/***/ "./node_modules/toggle-selection/index.js":
/*!************************************************!*\
  !*** ./node_modules/toggle-selection/index.js ***!
  \************************************************/
/***/ ((module) => {


module.exports = function () {
  var selection = document.getSelection();
  if (!selection.rangeCount) {
    return function () {};
  }
  var active = document.activeElement;

  var ranges = [];
  for (var i = 0; i < selection.rangeCount; i++) {
    ranges.push(selection.getRangeAt(i));
  }

  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML
    case 'INPUT':
    case 'TEXTAREA':
      active.blur();
      break;

    default:
      active = null;
      break;
  }

  selection.removeAllRanges();
  return function () {
    selection.type === 'Caret' &&
    selection.removeAllRanges();

    if (!selection.rangeCount) {
      ranges.forEach(function(range) {
        selection.addRange(range);
      });
    }

    active &&
    active.focus();
  };
};


/***/ })

});
//# sourceMappingURL=components-using-inline-svg-IconArt-IconArt-stories.04163a729067124ac3c9.hot-update.js.map