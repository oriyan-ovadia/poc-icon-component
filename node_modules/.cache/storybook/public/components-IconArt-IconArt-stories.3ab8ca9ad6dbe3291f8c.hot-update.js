"use strict";
self["webpackHotUpdatepoc_icon_component"]("components-IconArt-IconArt-stories",{

/***/ "./src/components/IconArt/IconArt.stories.tsx":
/*!****************************************************!*\
  !*** ./src/components/IconArt/IconArt.stories.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IconExplorer": () => (/* binding */ IconExplorer),
/* harmony export */   "Primary": () => (/* binding */ Primary),
/* harmony export */   "ThemeColor": () => (/* binding */ ThemeColor),
/* harmony export */   "__namedExportsOrder": () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _IconArt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./IconArt */ "./src/components/IconArt/IconArt.tsx");
/* harmony import */ var copy_to_clipboard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! copy-to-clipboard */ "./node_modules/copy-to-clipboard/index.js");
/* harmony import */ var copy_to_clipboard__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(copy_to_clipboard__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _IconArt_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./IconArt.types */ "./src/components/IconArt/IconArt.types.ts");
/* harmony import */ var _Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Tooltip/Tooltip */ "./src/components/Tooltip/Tooltip.tsx");
/* harmony import */ var _HStack_HStack__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../HStack/HStack */ "./src/components/HStack/HStack.tsx");
/* harmony import */ var _ButtonToggleGroup_ButtonToggleGroup__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ButtonToggleGroup/ButtonToggleGroup */ "./src/components/ButtonToggleGroup/ButtonToggleGroup.tsx");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
var _Primary$parameters, _Primary$parameters2, _Primary$parameters2$, _ThemeColor$parameter, _ThemeColor$parameter2, _ThemeColor$parameter3, _IconExplorer$paramet, _IconExplorer$paramet2, _IconExplorer$paramet3;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }









var meta = {
  title: 'Components/IconArt',
  component: _IconArt__WEBPACK_IMPORTED_MODULE_1__.IconArt,
  tags: ['autodocs']
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
var Primary = {
  render: function render(args) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_IconArt__WEBPACK_IMPORTED_MODULE_1__.IconArt, _objectSpread({}, args));
  },
  args: {
    icon: 'dog-face'
  }
};
var ThemeColor = {
  render: function render(args) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_HStack_HStack__WEBPACK_IMPORTED_MODULE_4__.HStack, {
      gap: "md",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_IconArt__WEBPACK_IMPORTED_MODULE_1__.IconArt, _objectSpread(_objectSpread({}, args), {}, {
        icon: "dog-face",
        themeColor: "light"
      })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_IconArt__WEBPACK_IMPORTED_MODULE_1__.IconArt, _objectSpread(_objectSpread({}, args), {}, {
        icon: "dog-face",
        themeColor: "dark"
      })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_IconArt__WEBPACK_IMPORTED_MODULE_1__.IconArt, _objectSpread(_objectSpread({}, args), {}, {
        icon: "cat-face",
        themeColor: "light"
      })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_IconArt__WEBPACK_IMPORTED_MODULE_1__.IconArt, _objectSpread(_objectSpread({}, args), {}, {
        icon: "cat-face",
        themeColor: "dark"
      }))]
    });
  },
  // @ts-ignore
  args: {},
  parameters: {
    docs: {
      description: {
        story: "By using the `themeColor` prop, the icon can adjust itself according to the app's theme. The default is `light`."
      }
    }
  }
};
var AllIcons = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(function (_ref) {
  var icons = _ref.icons;
  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(''),
    _useState2 = _slicedToArray(_useState, 2),
    copiedIconName = _useState2[0],
    setCopiedIconName = _useState2[1];
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
    var timeout;
    if (copiedIconName) {
      timeout = setTimeout(function () {
        setCopiedIconName('');
      }, 1000);
    }
    return function () {
      clearTimeout(timeout);
    };
  }, [copiedIconName]);
  function _onClick(iconName) {
    copy_to_clipboard__WEBPACK_IMPORTED_MODULE_2___default()(iconName);
    if (copiedIconName !== iconName || !copiedIconName) {
      setCopiedIconName(iconName);
    }
  }
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("div", {
    className: "icon-grid",
    children: icons.map(function (iconName) {
      var isCopied = iconName === copiedIconName;
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("div", {
        className: "icon-btn-wrapper",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_3__.Tooltip, {
          content: isCopied ? 'Copied to clipboard' : iconName,
          isOpen: copiedIconName && isCopied ? true : undefined,
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("button", {
            className: "btn-icon",
            onClick: function onClick() {
              return _onClick(iconName);
            },
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_IconArt__WEBPACK_IMPORTED_MODULE_1__.IconArt, {
              icon: iconName,
              size: "md"
            })
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("div", {
          className: "icon-name",
          children: iconName
        })]
      });
    })
  });
});
var IconExplorer = {
  render: function render(args) {
    function onToggleThemeColor(value) {
      console.log(value);
    }
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("div", {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("div", {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_ButtonToggleGroup_ButtonToggleGroup__WEBPACK_IMPORTED_MODULE_5__.ButtonToggleGroup, {
          defaultValue: "light",
          onChange: onToggleThemeColor,
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_ButtonToggleGroup_ButtonToggleGroup__WEBPACK_IMPORTED_MODULE_5__.ButtonToggleGroup.Button, {
            value: "one",
            children: "One"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_ButtonToggleGroup_ButtonToggleGroup__WEBPACK_IMPORTED_MODULE_5__.ButtonToggleGroup.Button, {
            value: "two",
            children: "Two"
          })]
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(AllIcons, {
        icons: _IconArt_types__WEBPACK_IMPORTED_MODULE_7__.iconArtArr
      })]
    });
  },
  // @ts-ignore
  args: {},
  parameters: {
    docs: {
      description: {
        story: 'Browse icons, copy their names to the clipboard by clicking them, and view them in different theme color.'
      }
    }
  }
};
Primary.parameters = _objectSpread(_objectSpread({}, Primary.parameters), {}, {
  docs: _objectSpread(_objectSpread({}, (_Primary$parameters = Primary.parameters) === null || _Primary$parameters === void 0 ? void 0 : _Primary$parameters.docs), {}, {
    source: _objectSpread({
      originalSource: "{\n  render: args => {\n    return <IconArt {...args}></IconArt>;\n  },\n  args: {\n    icon: 'dog-face'\n  }\n}"
    }, (_Primary$parameters2 = Primary.parameters) === null || _Primary$parameters2 === void 0 ? void 0 : (_Primary$parameters2$ = _Primary$parameters2.docs) === null || _Primary$parameters2$ === void 0 ? void 0 : _Primary$parameters2$.source)
  })
});
ThemeColor.parameters = _objectSpread(_objectSpread({}, ThemeColor.parameters), {}, {
  docs: _objectSpread(_objectSpread({}, (_ThemeColor$parameter = ThemeColor.parameters) === null || _ThemeColor$parameter === void 0 ? void 0 : _ThemeColor$parameter.docs), {}, {
    source: _objectSpread({
      originalSource: "{\n  render: args => {\n    return <HStack gap=\"md\">\n        <IconArt {...args} icon=\"dog-face\" themeColor=\"light\" />\n        <IconArt {...args} icon=\"dog-face\" themeColor=\"dark\" />\n        <IconArt {...args} icon=\"cat-face\" themeColor=\"light\" />\n        <IconArt {...args} icon=\"cat-face\" themeColor=\"dark\" />\n      </HStack>;\n  },\n  // @ts-ignore\n  args: {},\n  parameters: {\n    docs: {\n      description: {\n        story: \"By using the `themeColor` prop, the icon can adjust itself according to the app's theme. The default is `light`.\"\n      }\n    }\n  }\n}"
    }, (_ThemeColor$parameter2 = ThemeColor.parameters) === null || _ThemeColor$parameter2 === void 0 ? void 0 : (_ThemeColor$parameter3 = _ThemeColor$parameter2.docs) === null || _ThemeColor$parameter3 === void 0 ? void 0 : _ThemeColor$parameter3.source)
  })
});
IconExplorer.parameters = _objectSpread(_objectSpread({}, IconExplorer.parameters), {}, {
  docs: _objectSpread(_objectSpread({}, (_IconExplorer$paramet = IconExplorer.parameters) === null || _IconExplorer$paramet === void 0 ? void 0 : _IconExplorer$paramet.docs), {}, {
    source: _objectSpread({
      originalSource: "{\n  render: args => {\n    function onToggleThemeColor(value: string) {\n      console.log(value);\n    }\n    return <div>\n        <div>\n          <ButtonToggleGroup defaultValue=\"light\" onChange={onToggleThemeColor}>\n            <ButtonToggleGroup.Button value=\"one\">One</ButtonToggleGroup.Button>\n            <ButtonToggleGroup.Button value=\"two\">Two</ButtonToggleGroup.Button>\n          </ButtonToggleGroup>\n        </div>\n        <AllIcons icons={iconArtArr} />\n      </div>;\n  },\n  // @ts-ignore\n  args: {},\n  parameters: {\n    docs: {\n      description: {\n        story: 'Browse icons, copy their names to the clipboard by clicking them, and view them in different theme color.'\n      }\n    }\n  }\n}"
    }, (_IconExplorer$paramet2 = IconExplorer.parameters) === null || _IconExplorer$paramet2 === void 0 ? void 0 : (_IconExplorer$paramet3 = _IconExplorer$paramet2.docs) === null || _IconExplorer$paramet3 === void 0 ? void 0 : _IconExplorer$paramet3.source)
  })
});
var __namedExportsOrder = ["Primary", "ThemeColor", "IconExplorer"];

/***/ })

});